"""
Django settings for btkproject project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-jrsjpqaab()c*+r$#%2ae5v90b8p#hyuez$jhaym%aqdk-v(ij')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True').lower() == 'true'

ALLOWED_HOSTS = ['*']  # Render.com için tüm hostlara izin ver


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'demo',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',  # CSRF koruması test için devre dışı
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

# MongoDB bağlantısı için mongoengine ayarları
MONGODB_HOST = os.environ.get('MONGODB_HOST', 'localhost')
MONGODB_NAME = os.environ.get('MONGODB_NAME', 'btk_backend')

# Debug için environment variable'ları yazdır
print(f"Environment MONGODB_HOST: {os.environ.get('MONGODB_HOST')}")
print(f"Environment MONGODB_NAME: {os.environ.get('MONGODB_NAME')}")

# MongoDB Atlas bağlantısı - Zorla Atlas'a bağlan
try:
    from mongoengine import connect
    
    # Atlas connection string'ini environment variable'dan al
    atlas_connection_string = os.environ.get('MONGODB_HOST', "mongodb+srv://halitcanemir06:1591235He@cluster0.eqsstlg.mongodb.net/btkdb?retryWrites=true&w=majority&appName=Cluster0")
    
    print(f"Atlas connection string: {atlas_connection_string[:50]}...")
    print("MongoDB Atlas'a bağlanıyor...")
    
    # Atlas'a doğrudan bağlan
    connect(host=atlas_connection_string, serverSelectionTimeoutMS=10000, connectTimeoutMS=10000)
    print("✅ MongoDB Atlas bağlantısı başarılı!")
    
except Exception as e:
    print(f"❌ MongoDB Atlas bağlantı hatası: {e}")
    print(f"Hata detayı: {type(e).__name__}")
    # Hata durumunda uygulama çalışmaya devam etsin

# Gemini AI API Key
GEMINI_API_KEY = os.environ.get('GEMINI_API_KEY', 'AIzaSyCbCKfQbDi8_qsBNMcaFBly8RppdrV791Q')

# Email Settings
SMTP_SERVER = os.environ.get('SMTP_SERVER', 'smtp.gmail.com')
SMTP_PORT = int(os.environ.get('SMTP_PORT', 587))
SMTP_USERNAME = os.environ.get('SMTP_USERNAME', 'madeinyouutr@gmail.com')
SMTP_PASSWORD = os.environ.get('SMTP_PASSWORD', 'xaus dyhb qqyb ikij')

# Örnek:
# SMTP_USERNAME = 'btkbackend@gmail.com'
# SMTP_PASSWORD = 'abcd efgh ijkl mnop'

# JWT Settings
JWT_SECRET_KEY = os.environ.get('JWT_SECRET_KEY', 'your-jwt-secret-key-here')
JWT_ALGORITHM = os.environ.get('JWT_ALGORITHM', 'HS256')


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
